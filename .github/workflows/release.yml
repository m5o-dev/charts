name: Release Charts
on:
  push:
    branches:
      - main
    paths:
      - 'charts/**'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  release:
    # Usando os runners auto-hospedados com as labels padrão
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      
      - name: Package Charts
        run: |
          mkdir -p .cr-release-packages
          for chart in charts/*; do
            if [ -d "$chart" ]; then
              # Obter o nome do chart a partir do diretório
              chart_name=$(basename "$chart")
              
              # Extrair a versão do chart
              chart_version=$(grep -m 1 'version:' "$chart/Chart.yaml" | awk '{print $2}')
              
              # Construir dependências do chart
              echo "Building dependencies for $chart_name"
              helm dependency build "$chart"
              
              # Empacotar o chart
              helm package "$chart" -d .cr-release-packages/
              echo "Packaged $chart_name v$chart_version"
            fi
          done
          
      - name: Checkout gh-pages Branch
        run: |
          # Clonar a branch gh-pages para preservar o conteúdo existente
          git clone --branch gh-pages https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git gh-pages || {
            # Se a branch gh-pages não existe ainda, criar um diretório vazio
            echo "Branch gh-pages não existe ainda, criando diretório vazio"
            mkdir -p gh-pages
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Prepare GitHub Pages Content
        run: |
          # Criar script para indexação
          cat > update-index.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Organizar os charts em pastas separadas
          for chart_package in .cr-release-packages/*.tgz; do
            if [ -f "$chart_package" ]; then
              # Extrair o nome do chart do arquivo .tgz (removendo a versão)
              chart_name=$(basename "$chart_package" | sed -E 's/(.+)-[0-9]+\.[0-9]+\.[0-9]+\.tgz/\1/')
              
              # Criar diretório para o chart se não existir
              mkdir -p "gh-pages/charts/$chart_name"
              
              # Copiar o pacote para a pasta específica do chart
              cp "$chart_package" "gh-pages/charts/$chart_name/"
              echo "Copiado $chart_package para gh-pages/charts/$chart_name/"
            fi
          done
          
          # Entrar na pasta gh-pages
          cd gh-pages
          
          # Entrar na pasta charts
          cd charts
          
          echo "Gerando index.yaml na pasta charts/"
          # Gerar o index.yaml diretamente na pasta charts/ para todos os charts
          helm repo index --url "https://OWNER.github.io/REPO/charts" .
          
          # Mostrar o resultado
          echo "Conteúdo do index.yaml na pasta charts/:"
          cat index.yaml | head -20
          
          # Voltar para a pasta gh-pages
          cd ..
          
          # Copiar o index.yaml da pasta charts/ para a raiz
          cp charts/index.yaml .
          echo "Copiado index.yaml da pasta charts/ para a raiz"

          # Deleta o index.yaml da pasta charts/
          rm -f charts/index.yaml
          echo "Deletado index.yaml da pasta charts/"
          
          # Voltar para o diretório raiz
          cd ..
          EOF
          
          # Substituir placeholders com valores reais
          sed -i "s/OWNER/${{ github.repository_owner }}/g" update-index.sh
          sed -i "s/REPO/${{ github.event.repository.name }}/g" update-index.sh
          
          # Executar script
          chmod +x update-index.sh
          ./update-index.sh

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          keep_files: true
          
      - name: Cleanup
        run: |
          rm -rf gh-pages
          rm -rf .cr-release-packages
          rm -f update-index.sh